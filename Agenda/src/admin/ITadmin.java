/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;


import static factures.Factures.creerFacture;
import static gestionagenda.GestionAgenda.rq;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import database.operationAjout;
import database.operationModif;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 *
 * @author Villalemons
 */
public class ITadmin extends javax.swing.JFrame {

    /**
     * Creates new form ITadmin
     */
    public ITadmin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnQuitter = new javax.swing.JButton();
        btnOptionsUtilisateurs = new javax.swing.JButton();
        btnOptionsSalles = new javax.swing.JButton();
        btnOptionsTaches = new javax.swing.JButton();
        btnGenerationDevis = new javax.swing.JButton();
        btnModifier = new javax.swing.JButton();
        btnOptionResa = new javax.swing.JButton();
        btnOptionClient = new javax.swing.JButton();
        btnOptionTypeTache = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Paramètres administrateur");

        btnQuitter.setBackground(java.awt.Color.white);
        btnQuitter.setText("Quitter");
        btnQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitterActionPerformed(evt);
            }
        });

        btnOptionsUtilisateurs.setText("Options Utilisateurs");
        btnOptionsUtilisateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionsUtilisateursActionPerformed(evt);
            }
        });

        btnOptionsSalles.setText("Options Salles");
        btnOptionsSalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionsSallesActionPerformed(evt);
            }
        });

        btnOptionsTaches.setText("Options Tâches");
        btnOptionsTaches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionsTachesActionPerformed(evt);
            }
        });

        btnGenerationDevis.setText("Generer Devis");
        btnGenerationDevis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerationDevisActionPerformed(evt);
            }
        });

        btnModifier.setText("Generer Facture");
        btnModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnModifierActionPerformed(evt);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        
        
        btnOptionResa.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		btnOptionReservationActionPerformed(evt);
        	}
        });
        btnOptionResa.setText("Options R\u00E9servations");
        
        
        btnOptionClient.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		btnOptionClientActionPerformed(evt);
        	}
        });
        btnOptionClient.setText("Options Clients");
        
        
        btnOptionTypeTache.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		btnOptionTypeTacheActionPerformed(e);
        	}
        });
        btnOptionTypeTache.setText("Options Type Taches");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(btnOptionsUtilisateurs, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(404)
        					.addComponent(jLabel1)
        					.addGap(0, 370, Short.MAX_VALUE))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(btnOptionsTaches, GroupLayout.DEFAULT_SIZE, 923, Short.MAX_VALUE))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(btnOptionsSalles, GroupLayout.DEFAULT_SIZE, 923, Short.MAX_VALUE)))
        			.addContainerGap())
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(btnOptionResa, GroupLayout.PREFERRED_SIZE, 923, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(btnOptionClient, GroupLayout.PREFERRED_SIZE, 923, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(btnOptionTypeTache, GroupLayout.PREFERRED_SIZE, 923, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(btnGenerationDevis, GroupLayout.DEFAULT_SIZE, 923, Short.MAX_VALUE)
        			.addContainerGap())
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(btnModifier, GroupLayout.PREFERRED_SIZE, 923, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(377, Short.MAX_VALUE)
        			.addComponent(btnQuitter, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)
        			.addGap(369))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(jLabel1)
        					.addGap(86)
        					.addComponent(btnOptionsUtilisateurs, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(btnOptionsTaches, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(54)
        					.addComponent(btnOptionsSalles, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)))
        			.addGap(18)
        			.addComponent(btnOptionResa, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(btnOptionClient, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(btnOptionTypeTache, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(btnGenerationDevis, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(btnModifier, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(btnQuitter, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(234, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

	private void btnQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitterActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnQuitterActionPerformed
/**
 * Cette fonction sert à choisir une option (Ajout, Modification, Suppression) relative à une salle.
 * @param evt 
 */
    private void btnOptionsSallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionsSallesActionPerformed
        String[] options = {"Ajouter une salle", "Modifier une salle", "Supprimer une salle"};
        String nom = "";
        nom = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une option","Options salle",JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
        if(nom != null){
        switch(nom){
            case "Ajouter une salle":
                ITajout ajout = ITajout.creerFenetre();
                ajout.setLabelTitle(ajout.getLabelTitle()+"d'une salle");
                ajout.setLabelChoice(ajout.getLabelChoice()+"votre salle");
                ajout.setLabelTable("Salle");
                ajout.getLabelTable().setVisible(false);
                ajout.setVisible(true);
                
                break;
                
            case "Modifier une salle":
                String nomsalle;
            try {
            	String [] salles= rq.getListedElements("salle", "libelle");
                nomsalle = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une salle", "Options salles - Modification -", JOptionPane.QUESTION_MESSAGE, null, salles, salles[0]);
                if(nomsalle != null){
                	int id=rq.getIdByName("salle", "idSalle", nomsalle, "libelle");
                	int superficie=rq.getIntById("salle","idSalle", "superficie", id);
                	String couleur=rq.getStrById("salle","idSalle", "codeCouleur", id);
                	String comment=rq.getStrById("salle","idSalle","descriptif",id);
                    ITajout modif = ITajout.creerFenetre(id);
                    modif.setNom(nomsalle);
                    modif.setSuperficie(superficie);
                    modif.setCouleur(couleur);
                    modif.setComment(comment);
                    
                    /*modif.setTxtTitle("Salle : "+nomsalle);
                    modif.setLbNom(nomsalle);
                    modif.getLbNom().setVisible(false);
                    modif.setLbTable("Salle");
                    modif.getLbTable().setVisible(false);*/
                    //modif.getBtnCouleur().setBackground(rq.hex2Rgb("Salle", nomsalle));
                    //modif.setTitle(Integer.toString(id));
                    modif.setVisible(true); 
                }
            }catch (SQLException ex){Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);}
            
                break;
                
            case "Supprimer une salle":
            try {
            	String [] salles= rq.getListedElements("salle", "libelle");
                nomsalle = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une salle", "Options salles - Modification -", JOptionPane.QUESTION_MESSAGE, null, salles, salles[0]);
                if(nomsalle != null){
                    int choix = (int)JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer : "+nomsalle+"?", "Suppression de la salle : "+nomsalle, JOptionPane.YES_NO_OPTION);
                    if(choix == 0){
                        //Requete DELETE sur la BD
                        rq.delete("salle", "libelle", nomsalle);
                        JOptionPane.showMessageDialog(null, "La salle '"+nomsalle+"' a été supprimée !");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Annulation de la suppression !");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
            }
        
                break;
        }
        }
    }//GEN-LAST:event_btnOptionsSallesActionPerformed
/**
 * Cette fonction sert pour choisir une option (Ajout, Modification, Suppression) relative à un utilisateur.
 * @param evt 
 */
    private void btnOptionsUtilisateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionsUtilisateursActionPerformed
        String[] options = {"Ajouter un utilisateur", "Modifier un utilisateur", "Supprimer un utilisateur"};
        String nom;
        nom = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une option","Options utilisateurs",JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
        switch(nom){
            case "Ajouter un utilisateur":
                ITajoutUtilisateur ajout = ITajoutUtilisateur.creerFenetre();
                ajout.setVisible(true);
                
                break;
                
            case "Modifier un utilisateur":
                String nomutilisateur;
            try {
            	String [] users= rq.getListedElements("usager", "login");
                nomutilisateur = (String)JOptionPane.showInputDialog(null, "Veuillez choisir un utilisateur à modifier", "Options utilisateurs - Modification -", JOptionPane.QUESTION_MESSAGE, null, users, users[0]);
                if(nomutilisateur != null){
                	int id=rq.getIdByName("usager", "idUsager", nomutilisateur, "login");
                	int admin=rq.getIntById("usager", "idUsager", "administrateur", id);
                	String mail=rq.getStrById("usager", "idUsager", "mail", id);
                	String login=rq.getStrById("usager", "idUsager", "login", id);
                	String mdp=rq.getStrById("usager", "idUsager", "password", id);
                	String prenom=rq.getStrById("usager", "idUsager", "prenom", id);
                	String nomU=rq.getStrById("usager", "idUsager", "nom", id);
                    ITajoutUtilisateur modif = ITajoutUtilisateur.creerFenetre(id);
                    //modif.setTitle(Integer.toString(id));
                    modif.setAdmin(admin);
                    modif.setMail(mail);
                    modif.setLogin(login);
                    modif.setMDP(mdp);
                    modif.setPrenom(prenom);
                    modif.setNom(nomU);
                    modif.setVisible(true);
                    /*modif.setTitle("Utilisateur : "+nomutilisateur);
                    modif.setLbUser(nomutilisateur);
                    modif.getLbUser().setVisible(false);
                    modif.setVisible(true);*/ 
                }
            }catch (SQLException ex){Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);}
            
                break;
                
                
            case "Supprimer un utilisateur":
            try {
            	String [] users= rq.getListedElements("usager", "login");
                nomutilisateur = (String)JOptionPane.showInputDialog(null, "Veuillez choisir un utilisateur à modifier", "Options utilisateurs - Modification -", JOptionPane.QUESTION_MESSAGE, null, users, users[0]);
                if(nomutilisateur != null){
                    int choix = (int)JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer : "+nomutilisateur+"?", "Suppression de l'utilisateur : "+nomutilisateur, JOptionPane.YES_NO_OPTION);
                    if(choix == 0){
                        //Requete DELETE sur la BD
                        //String[] nomUsager = getNomPrenom(nomutilisateur);
                        //String log = rq.getUtilisateur(nomUsager[1], nomUsager[0])[1];
                        rq.delete("usager", "login", nomutilisateur);
                        JOptionPane.showMessageDialog(null, "L'utilisateur '"+nomutilisateur+"' a été supprimé !");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Annulation de la suppression !");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
            }
        
                break;
        }
    }//GEN-LAST:event_btnOptionsUtilisateursActionPerformed
/**
 * Cette fonction sert pour choisir une option (Ajout, Modification, Suppression) relative à une tache.
 * @param evt 
 */
    private void btnOptionsTachesActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        String[] options = {"Ajouter une tache", "Modifier une tache", "Supprimer une tache"};
        String nom = "";
        nom = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une option","Options taches",JOptionPane.QUESTION_MESSAGE,null,options,options[0]);;
        if(nom != null){
        switch(nom){
            case "Ajouter une tache":
                ITajoutTache ajout = ITajoutTache.creerFenetre();
                /*ajout.setLabelTitle(ajout.getLabelTitle()+"d'une tache");
                ajout.setLabelChoice(ajout.getLabelChoice()+"une tache");
                ajout.getPanelSalle().setVisible(false);
                ajout.setLabelTable("Tache");
                ajout.getLabelTable().setVisible(false);*/
                ajout.setVisible(true);
                
                break;
                
            case "Modifier une tache":
                String nomTache;
            try {
            	String [] taches= rq.getListedElements("tache", "nomTache");
                nomTache = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une tache", "Options taches - Modification -", JOptionPane.QUESTION_MESSAGE, null, taches, taches[0]);
                System.out.println("ICIIII : "+nomTache);
                if(nomTache != null){
                	String [] dates = rq.getListedElementsByName("tache", "dateDebut", nomTache, "nomTache");
                	String dateDebut = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner une date de début de réservation","Rechercher une date",JOptionPane.QUESTION_MESSAGE, null,dates,dates[0]);
                    int id = rq.getIdByTwoNames("tache", "idTache", nomTache, "nomTache", dateDebut, "dateDebut");
                	String dateFin = rq.getStrById("tache", "idTache", "dateFin", id);
                	String comment = rq.getStrById("tache", "idTache", "descriptif", id);
                	String heureD = rq.getHourById("tache", "idTache", "heureDebut", id);
                	String heureF = rq.getHourById("tache", "idTache", "heureFin", id);
                	heureD = heureD.split(":")[0]+":"+heureD.split(":")[1];
                    
                    heureF = heureF.split(":")[0]+":"+heureF.split(":")[1];
                    
                	int idType = rq.getIntById("tache", "idTache", "fkidTypeTache", id);
                	String Type= rq.getStrById("typeTache", "idTypeTache", "nom", idType);
                	ITajoutTache modif = ITajoutTache.creerFenetre(id);
                    /*modif.setTxtTitle("Tache : "+nomTache);
                    modif.setLbNom(nomTache);
                    modif.getLbNom().setVisible(false);
                    modif.getBtnCouleur().setBackground(rq.hex2Rgb("Tache", nomTache));
                    modif.getBtnSuperficie().setVisible(false);
                    modif.setLbTable("Tache");
                    modif.getLbTable().setVisible(false);*/
                	modif.setType(Type);
                    modif.setDateDebut(dateDebut);
                    modif.setDateFin(dateFin);
                    modif.setComment(comment);
                    modif.setHeureDebut(heureD);
                    modif.setHeureFin(heureF);
                    
                    modif.setNom(nomTache);
                    //modif.setTitle(Integer.toString(id));
                    modif.setVisible(true); 
                }
            }catch (SQLException ex){Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);}
            
                break;
                
            case "Supprimer une tache":
            try {
            	String [] taches= rq.getListedElements("tache", "nomTache");
                nomTache = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une tache", "Options taches - Modification -", JOptionPane.QUESTION_MESSAGE, null, taches, taches[0]);
                System.out.println("ICIIII : "+nomTache);
                if(nomTache != null){
                	
                	int choix = (int)JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer : "+nomTache+"?", "Suppression de la tache : "+nomTache, JOptionPane.YES_NO_OPTION);
                    if(choix == 0){
                        //Requete DELETE sur la BD
                        rq.delete("Tache", nomTache);
                        JOptionPane.showMessageDialog(null, "La tache '"+nomTache+"' a été supprimée !");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Annulation de la suppression !");
                    }
                }
        	
            } catch (SQLException ex) {
                Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
            }
        
                break;
        }
        }
    }                                                
    
    private void btnOptionReservationActionPerformed(ActionEvent evt) {
    	String[] options = {"Ajouter une reservation", "Modifier une reservation", "Supprimer une reservation", "Acceder aux informations d'une reservation"};
        String nom = "";
        nom = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une option","Options taches",JOptionPane.QUESTION_MESSAGE,null,options,options[0]);;
        if(nom != null){
        switch(nom){
            case "Ajouter une reservation":
            	planningEnregistrement res=planningEnregistrement.creerFenetre();
                res.setIg(Igeneration.getIg(0));
                res.setVisible(true);
            	//ITcreerReservation1 nouvelleResa = ITcreerReservation1.creerFenetre();
                //nouvelleResa.setVisible(true);
                
                break;
                
            case "Modifier une reservation":
            	try {
            	String[] clients = rq.getClients();
                String[] noms = rq.getListedElements("client", "nom");
                String[] prenoms = rq.getListedElements("client", "prenom");
                String client = "";
                client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients, clients[0]);
                if (client!=null){
                    int longueur = noms.length;
                    String[] client2 = new String[longueur];
                    String leNom = "";
                    String lePrenom = "";
                    for(int i = 0; i<longueur; i++){
                        client2[i] = prenoms[i]+" "+noms[i];
                        if(client2[i] == null ? client == null : client2[i].equals(client)){
                            leNom = noms[i];
                            lePrenom = prenoms[i];
                        }
                    }
                    int idClient = rq.getIdClient(leNom, lePrenom);
                    String[] dates = rq.getListedElementsById("reservation", "dateDebut", idClient, "fkidClient");
                    String date = null;
                    if (!"".equals(dates[0])){
                        date = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner une date de début de réservation","Rechercher une date",JOptionPane.QUESTION_MESSAGE, null,dates,dates[0]);
                    } 
                    else{
                        JOptionPane.showMessageDialog(null, "Il n'y a pas de reservation pour ce client", "information",JOptionPane.INFORMATION_MESSAGE);
                    }          
                    if (date!=null){
                    	int idReservation = rq.getIdByIdString("reservation", "idReservation", date, "dateDebut", idClient, "fkidClient");
                        String salle[] = rq.getSalleFromResa(idReservation);
                        //String infos[] = rq.getInfosReservation(idReservation);
                        //int idClient = rq.getIntById("reservation", "idReservation", "fkidClient", idReservation);
                        String nomclient = rq.getStrById("client", "idClient", "nom", idClient);
                        String prenomclient = rq.getStrById("client", "idClient", "prenom", idClient);
                        //String client = prenomclient+" "+nomclient;
                        //String date = rq.getStrById("reservation", "idReservation", "dateDebut", idReservation);
                        String dateFin = rq.getStrById("reservation", "idReservation", "dateFin", idReservation);
                        String[] disposition = rq.getDispositionFromResa(idReservation);
                        int[] nbpers = rq.getNbpersonnesFromResa(idReservation);
                        String formule = rq.getStrById("reservation", "idReservation", "fkidFormule", idReservation);
                        String heureD = rq.getHourById("reservation", "idReservation", "heureDebut", idReservation);
                        heureD = heureD.split(":")[0]+":"+heureD.split(":")[1];
                        String heureF = rq.getHourById("reservation", "idReservation", "heureFin", idReservation);
                        heureF = heureF.split(":")[0]+":"+heureF.split(":")[1];
                        //System.out.println(infos);
                        //String disposition = "";
                        //String salle = infos[9];
                        int[] idSR=rq.getSalleResa(idReservation);
                        String option[][] = rq.getOptionsFromResa(idSR);
                        String service[][] = rq.getServicesFromResa(idSR);
                        
                        String salles[] = {"studio", "cabane", "bureau", "atelier"};
                        String dispositions[] = {"ecole", "en U", "theatre", "salle vide", "central", "ilots"};
                        if (!"".equals(dates[0])){
                        	
                        	
                            
                            planningEnregistrement fac=planningEnregistrement.creerFenetre(idReservation);
                            fac.setIg(Igeneration.getIg(0));
                            fac.setClient(client);
                        	fac.setDisposition(disposition);
                        	fac.setNbPersonne(nbpers);
                        	fac.setDateDebut(date);
                        	fac.setSalle(salle);
                        	fac.setOptions(option);
                        	fac.setServices(service);
                        	fac.setDateFin(dateFin);
                        	fac.setFormule(formule);
                        	fac.setHeureDebut(heureD);
                        	fac.setHeureFin(heureF);
                            fac.setVisible(true);
                        }
                    }
                }
            } 
            catch (SQLException ex) {
                
            }
            	break;
                
            case "Supprimer une reservation":
            try {
            	String[] clients = rq.getClients();
                String[] noms = rq.getListedElements("client", "nom");
                String[] prenoms = rq.getListedElements("client", "prenom");
                String client = "";
                client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients, clients[0]);
                if (client!=null){
                    int longueur = noms.length;
                    String[] client2 = new String[longueur];
                    String leNom = "";
                    String lePrenom = "";
                    for(int i = 0; i<longueur; i++){
                        client2[i] = prenoms[i]+" "+noms[i];
                        if(client2[i] == null ? client == null : client2[i].equals(client)){
                            leNom = noms[i];
                            lePrenom = prenoms[i];
                        }
                    }
                    int idClient = rq.getIdClient(leNom, lePrenom);
                    String[] dates = rq.getListedElementsById("reservation", "dateDebut", idClient, "fkidClient");
                    String date = null;
                    if (!"".equals(dates[0])){
                        date = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner une date de début de réservation","Rechercher une date",JOptionPane.QUESTION_MESSAGE, null,dates,dates[0]);
                    } 
                    else{
                        JOptionPane.showMessageDialog(null, "Il n'y a pas de reservation pour ce client", "information",JOptionPane.INFORMATION_MESSAGE);
                    }          
                    if (date!=null){
                    	
                    	int idReservation = rq.getIdByIdString("reservation", "idReservation", date, "dateDebut", idClient, "fkidClient");
                    	int choix = (int)JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer la r�servation "+idReservation, "Suppression de la reservation", JOptionPane.YES_NO_OPTION);
                    
                    	if(choix == 0){
                        //Requete DELETE sur la BD
                        rq.deleteResa(idReservation);
                        JOptionPane.showMessageDialog(null, "La reservation "+idReservation+" a été supprimée !");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Annulation de la suppression !");
                    }
                }
                }
            } catch (SQLException ex) {
                Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
            }
        
                break;
        
        case "Acceder aux informations d'une reservation":
            try {
         
         String[] clients = rq.getClients();
         String[] noms = rq.getnomsClients();
         String[] prenoms = rq.getprenomsClients();
         String client = "";
         client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients,clients[0]);
         int longueur = noms.length;
         String[] client2 = new String[longueur];
         String leNom = "";
         String lePrenom = "";
         for(int i = 0; i<longueur; i++){
             client2[i] = prenoms[i]+" "+noms[i];
             if(client2[i] == null ? client == null : client2[i].equals(client)){
                 leNom = noms[i];
                 lePrenom = prenoms[i];
             }
         }
         int idClient = rq.getIdClient(leNom, lePrenom);
         String[] dates = rq.getDatesReservations(idClient);
         String date = "";
         if(client!=null){
             if (!"".equals(dates[0])){
                 date = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner une date de début de réservation","Rechercher une date",JOptionPane.QUESTION_MESSAGE, null,dates,dates[0]);
                 int idReservation = rq.getIdReservation(idClient, date);
                 String[] lesInfos = rq.getInfosReservation(idReservation);
                 if (date!=null){
                     JOptionPane.showMessageDialog(null, lesInfos, "Informations sur la réservation",JOptionPane.INFORMATION_MESSAGE);
                 }
             } 
             else{
                 JOptionPane.showMessageDialog(null, "Il n'y a pas de reservation pour ce client", "information",JOptionPane.INFORMATION_MESSAGE);

             }
         }
     } 
     catch (SQLException ex) {
         Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
     }
             break;
     }
        }
	}
    
    private void btnOptionClientActionPerformed(ActionEvent evt) {
    	String[] options = {"Ajouter un client", "Modifier un client", "Supprimer un client", "acceder aux informations d'un client"};
        String nom = "";
        nom = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une option","Options taches",JOptionPane.QUESTION_MESSAGE,null,options,options[0]);;
        if(nom != null){
        switch(nom){
            case "Ajouter un client":
            	ITajoutClient ajout = ITajoutClient.creerFenetre();
        		ajout.setVisible(true);
        		
        		break;
        		
            case "Modifier un client":
            	try{
            		String[] clients = rq.getClients();
            		String client = "";
            		String[] noms = rq.getListedElements("client", "nom");
            		String[] prenoms = rq.getListedElements("client", "prenom");
            		client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients,clients[0]);
            		if (client!=null){
            			int longueur = noms.length;
            			String[] client2 = new String[longueur];
            			String leNom = "";
            			String lePrenom = "";
            			for(int i = 0; i<longueur; i++){
            				client2[i] = prenoms[i]+" "+noms[i];
            				if(client2[i] == null ? client == null : client2[i].equals(client)){
            					leNom = noms[i];
            					lePrenom = prenoms[i];
            				}
            			}
            			int idClient = rq.getIdByTwoNames("client", "idClient", leNom, "nom", lePrenom, "prenom");
            			//String[] dates = rq.getDatesReservations(idClient);
            			String date = null;
            			String adresse = rq.getStrById("client", "idClient", "adresseFacturation", idClient);
            			String entite = rq.getStrById("client", "idClient", "entite", idClient);
            			String telephone = rq.getStrById("client", "idClient", "telephone", idClient);
            			String comment = rq.getStrById("client", "idClient", "commentaire", idClient);
            			String mail = rq.getStrById("client", "idClient", "eMail", idClient);
            			ITajoutClient clientmodif = ITajoutClient.creerFenetre(idClient);
            			//clientmodif.setlabelprenom(lePrenom);
            			//clientmodif.setlabelnom(leNom);
            			clientmodif.setAdresse(adresse);
            			clientmodif.setEntite(entite);
            			clientmodif.setPhone(telephone);
            			clientmodif.setMail(mail);
            			clientmodif.setComment(comment);
            			clientmodif.setNom(leNom);
            			clientmodif.setPrenom(lePrenom);
            			//clientmodif.setTitle(Integer.toString(idClient));
            			clientmodif.setVisible(true);
            		}
            	}catch (SQLException ex) {
                    //Logger.getLogger(ITboutonsRechercher.class.getName()).log(Level.SEVERE, null, ex);
                }
            	
            case "Supprimer un client":
            	try{
            	String[] clients = rq.getClients();
        		String client = "";
        		String[] noms = rq.getListedElements("client", "nom");
        		String[] prenoms = rq.getListedElements("client", "prenom");
        		client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients,clients[0]);
        		if (client!=null){
        			int longueur = noms.length;
        			String[] client2 = new String[longueur];
        			String leNom = "";
        			String lePrenom = "";
        			for(int i = 0; i<longueur; i++){
        				client2[i] = prenoms[i]+" "+noms[i];
        				if(client2[i] == null ? client == null : client2[i].equals(client)){
        					leNom = noms[i];
        					lePrenom = prenoms[i];
        				}
        			}
        			int choix = (int)JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer le client "+lePrenom+" "+leNom, "Suppression de la reservation", JOptionPane.YES_NO_OPTION);
                    
                	if(choix == 0){
                    //Requete DELETE sur la BD
                    rq.deleteClient(lePrenom, leNom);
                    JOptionPane.showMessageDialog(null, "Le client "+lePrenom+" "+leNom+" a été supprimée !");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Annulation de la suppression !");
                }
        	}
        }catch (SQLException ex) {
            //Logger.getLogger(ITboutonsRechercher.class.getName()).log(Level.SEVERE, null, ex);
        }
                case "acceder aux informations d'un client":
                try {
            String[] clients = rq.getClients();
            String[] noms = rq.getnomsClients();
            String[] prenoms = rq.getprenomsClients();
         
            String client = "";
            client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients,clients[0]);
            
            int longueur = noms.length;
            String[] client2 = new String[longueur];
            String leNom = "";
            String lePrenom = "";
            for(int i = 0; i<longueur; i++){
               client2[i] = prenoms[i]+" "+noms[i];
               if(client2[i] == null ? client == null : client2[i].equals(client)){
                   leNom = noms[i];
                   lePrenom = prenoms[i];
               }
            }
            if(client != null){
                int idClient = rq.getIdClient(leNom, lePrenom);
                String[] lesInfos = rq.getInfosClient(idClient);
                JOptionPane.showMessageDialog(null, lesInfos, "Informations sur le client",JOptionPane.INFORMATION_MESSAGE);
            }
        } 
        catch (SQLException ex) {
            Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        }	
            	
    }
    
    private void btnOptionTypeTacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionsTachesActionPerformed
        String[] options = {"Ajouter un type de tache", "Modifier un type de tache", "Supprimer un type de tache"};
        String nom = "";
        nom = (String)JOptionPane.showInputDialog(null, "Veuillez choisir une option","Options taches",JOptionPane.QUESTION_MESSAGE,null,options,options[0]);;
        if(nom != null){
        switch(nom){
            case "Ajouter un type de tache":
                ITajoutTypeTache ajout = ITajoutTypeTache.creerFenetre();
                /*ajout.setLabelTitle(ajout.getLabelTitle()+"d'une tache");
                ajout.setLabelChoice(ajout.getLabelChoice()+"une tache");
                ajout.getPanelSalle().setVisible(false);
                ajout.setLabelTable("Tache");
                ajout.getLabelTable().setVisible(false);*/
                ajout.setVisible(true);
                
                break;
                
            case "Modifier un type de tache":
            try {
                String nomType;

            	String [] types= rq.getListedElements("typeTache", "nom");
                nomType = (String)JOptionPane.showInputDialog(null, "Veuillez choisir un type de tache", "Options type taches - Modification -", JOptionPane.QUESTION_MESSAGE, null, types, types[0]);
                System.out.println("ICIIII : "+nomType);
                if(nomType != null){
                	int id = rq.getIdByName("typeTache", "idTypeTache", nomType, "nom");
                	
                	
                	String hexa = rq.getStrById("typeTache", "idTypeTache", "codeCouleur", id);
                	ITajoutTypeTache modif = ITajoutTypeTache.creerFenetre(id);
                    /*modif.setTxtTitle("Tache : "+nomTache);
                    modif.setLbNom(nomTache);
                    modif.getLbNom().setVisible(false);
                    modif.getBtnCouleur().setBackground(rq.hex2Rgb("Tache", nomTache));
                    modif.getBtnSuperficie().setVisible(false);
                    modif.setLbTable("Tache");
                    modif.getLbTable().setVisible(false);*/
                    
                    modif.setCouleur(hexa);
                    modif.setNom(nomType);
                    //modif.setTitle(Integer.toString(id));
                    modif.setVisible(true); 
                }
            }catch (SQLException ex){Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);}
            
                break;
                
            case "Supprimer un type de tache":
            
            	String nomType;
                try {
                	String [] types= rq.getListedElements("typeTache", "nom");
                    nomType = (String)JOptionPane.showInputDialog(null, "Veuillez choisir un type de tache", "Options type taches - Modification -", JOptionPane.QUESTION_MESSAGE, null, types, types[0]);
                    System.out.println("ICIIII : "+nomType);
                    if(nomType != null){int choix = (int)JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer : "+nomType+"?", "Suppression de la tache : "+nomType, JOptionPane.YES_NO_OPTION);
                    if(choix == 0){
                        //Requete DELETE sur la BD
                        rq.delete("typeTache", nomType);
                        JOptionPane.showMessageDialog(null, "La tache '"+nomType+"' a été supprimée !");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Annulation de la suppression !");
                    }
                }
        	
            } catch (SQLException ex) {
                Logger.getLogger(ITadmin.class.getName()).log(Level.SEVERE, null, ex);
            }
        
                break;
        }
        }
    }//GEN-LAST:event_btnOptionsTachesActionPerformed
    

    private void btnGenerationDevisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerationDevisActionPerformed
    	planningNotRec dev=planningNotRec.creerFenetre();
        dev.setIg(Igeneration.getIg(1));
        dev.setVisible(true);
    	//ITgenerationDevis devis = new ITgenerationDevis();
        //devis.setVisible(true);
    }//GEN-LAST:event_btnGenerationDevisActionPerformed

    private void btnModifierActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {//GEN-FIRST:event_btnModifierActionPerformed
    	String [] Resa=rq.getListedElements("reservation", "idReservation");
    	String strFac = (String)JOptionPane.showInputDialog(null, "Veuillez choisir facture a editer", "Edition de facture", JOptionPane.QUESTION_MESSAGE, null, Resa, Resa[0]);
        
    	int idReservation=Integer.parseInt(strFac);
        String salle[] = rq.getSalleFromResa(idReservation);
        //String infos[] = rq.getInfosReservation(idReservation);
        int idClient = rq.getIntById("reservation", "idReservation", "fkidClient", idReservation);
        String nomclient = rq.getStrById("client", "idClient", "nom", idClient);
        String prenomclient = rq.getStrById("client", "idClient", "prenom", idClient);
        String client = prenomclient+" "+nomclient;
        String date = rq.getStrById("reservation", "idReservation", "dateDebut", idReservation);
        String dateFin = rq.getStrById("reservation", "idReservation", "dateFin", idReservation);
        String[] disposition = rq.getDispositionFromResa(idReservation);
        int[] nbpers = rq.getNbpersonnesFromResa(idReservation);
        String formule = rq.getStrById("reservation", "idReservation", "fkidFormule", idReservation);
        String heureD = rq.getHourById("reservation", "idReservation", "heureDebut", idReservation);
        heureD = heureD.split(":")[0]+":"+heureD.split(":")[1];
        String heureF = rq.getHourById("reservation", "idReservation", "heureFin", idReservation);
        heureF = heureF.split(":")[0]+":"+heureF.split(":")[1];
        //System.out.println(infos);
        //String disposition = "";
        //String salle = infos[9];
        int[] idSR=rq.getSalleResa(idReservation);
        String option[][] = rq.getOptionsFromResa(idSR);
        String service[][] = rq.getServicesFromResa(idSR);
        
        String salles[] = {"studio", "cabane", "bureau", "atelier"};
        String dispositions[] = {"ecole", "en U", "theatre", "salle vide", "central", "ilots"};
    	planningEnregistrement fac=planningEnregistrement.creerFenetre(Integer.parseInt(strFac));
        fac.setIg(Igeneration.getIg(2));
        fac.setClient(client);
    	fac.setDisposition(disposition);
    	fac.setNbPersonne(nbpers);
    	fac.setDateDebut(date);
    	fac.setSalle(salle);
    	fac.setOptions(option);
    	fac.setServices(service);
    	fac.setDateFin(dateFin);
    	fac.setFormule(formule);
    	fac.setHeureDebut(heureD);
    	fac.setHeureFin(heureF);
        fac.setVisible(true);
    	//creerFacture(Integer.parseInt(strFac));
        
    }//GEN-LAST:event_btnModifierActionPerformed

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnGenerationDevis;
    private javax.swing.JButton btnModifier;
    private javax.swing.JButton btnOptionsSalles;
    private javax.swing.JButton btnOptionsTaches;
    private javax.swing.JButton btnOptionsUtilisateurs;
    private javax.swing.JButton btnQuitter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton btnOptionResa;
    private javax.swing.JButton btnOptionClient;
    private javax.swing.JButton btnOptionTypeTache;
}
