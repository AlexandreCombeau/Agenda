/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.villalem.admin;

import static gestionagenda.GestionAgenda.rq;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class ITboutonsModifier extends javax.swing.JFrame {

    /**
     * Creates new form ITboutonsRechercher
     */
    public ITboutonsModifier() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnClient = new javax.swing.JButton();
        btnDevis = new javax.swing.JButton();
        btnFacture = new javax.swing.JButton();
        btnReservation = new javax.swing.JButton();
        btnQuitter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Que voulez vous rechercher?");

        btnClient.setText("Client");
        btnClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClientActionPerformed(evt);
            }
        });

        btnDevis.setText("Devis");
        btnDevis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevisActionPerformed(evt);
            }
        });

        btnFacture.setText("Facture");
        btnFacture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFactureActionPerformed(evt);
            }
        });

        btnReservation.setText("Reservation");
        btnReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservationActionPerformed(evt);
            }
        });

        btnQuitter.setText("Quitter");
        btnQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnFacture, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDevis, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnClient, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(btnQuitter))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel1)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClient, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDevis, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btnFacture, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnQuitter, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservationActionPerformed
       
    try {
            
            String[] clients = rq.getClients();
            String[] noms = rq.getnomsClients();
            String[] prenoms = rq.getprenomsClients();
            String client = "";
            client = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner un client","Rechercher un client",JOptionPane.QUESTION_MESSAGE, null,clients,clients[0]);
            int longueur = noms.length;
            String[] client2 = new String[longueur];
            String leNom = "";
            String lePrenom = "";
            for(int i = 0; i<longueur; i++){
                client2[i] = prenoms[i]+" "+noms[i];
                if(client2[i] == null ? client == null : client2[i].equals(client)){
                    leNom = noms[i];
                    lePrenom = prenoms[i];
                }
            }
            int idClient = rq.getIdClient(leNom, lePrenom);
            String[] dates = rq.getDatesReservations(idClient);
            String date = "";
            date = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner une date de début de réservation","Rechercher une date",JOptionPane.QUESTION_MESSAGE, null,dates,dates[0]);
            int idReservation = rq.getIdReservation(idClient, date);
          //  String[] lesInfos = rq.getInfosReservation(idReservation);
            String[] lesChangements ={"validite de la réservation(option)", "date de début", "date de fin", "heure de début", "heure de fin","nombres de personnes", "nombre d'heures", "formule", "client", "modifier un service", "ajouter un service","modifier une option", "ajouter une option", "modifier une salle", "ajouter une salle", "disposition"};
            String changement = "";
            if (!"".equals(dates[0])){
                changement = (String)JOptionPane.showInputDialog(null, "Veuillez sélectionner ce que vous voulez changer dans la réservation","Information à modifier",JOptionPane.QUESTION_MESSAGE, null,lesChangements,lesChangements[0]);
                if("validite de la réservation(option)".equals(changement)){
                    String validite[] = {"valider reservation", "invalider reservation"};
                    String validiteActuelle = rq.getValidite(idReservation);
                    String valide = (String)JOptionPane.showInputDialog(null, "Validite actuelle : "+validiteActuelle,"Validite",JOptionPane.QUESTION_MESSAGE, null,validite,validite[0]);
                    if ("valider reservation".equals(valide)){
                        int valider = 1;
                        rq.MAJvalide(valider, idReservation);
                    }
                    else {
                        int valider = 0;
                        rq.MAJvalide(valider, idReservation);
                    }
                }
                if("date de début".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String dateActuelle = infos[0];
                    String dateDe = (String)JOptionPane.showInputDialog(null, "date de debut actuelle : "+dateActuelle,"date de debut",JOptionPane.QUESTION_MESSAGE);
                    rq.MAJdateD(dateDe, idReservation);
                }
                if("date de fin".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String dateActuelle = infos[1];
                    String dateFi = (String)JOptionPane.showInputDialog(null, "date de fin actuelle : "+dateActuelle,"date de fin",JOptionPane.QUESTION_MESSAGE);
                    rq.MAJdateF(dateFi, idReservation);
                }
                if("heure de debut".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String heureActuelle = infos[2];
                    String heureDe = (String)JOptionPane.showInputDialog(null, "heure de debut actuelle : "+heureActuelle,"heure de debut",JOptionPane.QUESTION_MESSAGE);
                    rq.MAJheureD(heureDe, idReservation);
                }
                if("heure de fin".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String heureActuelle = infos[3];
                    String heureFi = (String)JOptionPane.showInputDialog(null, "heure de fin actuelle : "+heureActuelle,"heure de fin",JOptionPane.QUESTION_MESSAGE);
                    rq.MAJheureF(heureFi, idReservation);
                }
                if("nombre de personnes".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String nbPActuel = infos[7];
                    String nbP = (String)JOptionPane.showInputDialog(null, "nombre de personnes actuel : "+nbPActuel,"nombre de personnes",JOptionPane.QUESTION_MESSAGE);
                    int nb = Integer.parseInt(nbP, 10);
                    rq.MAJnbPersonnes(nb, idReservation);
                }
                if("nombre d'heures".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String nbHActuel = infos[8];
                    String nbH = (String)JOptionPane.showInputDialog(null, "nombre d'heures actuel : "+nbHActuel,"nombre d'heures",JOptionPane.QUESTION_MESSAGE);
                    int nb = Integer.parseInt(nbH, 10);
                    rq.MAJnbHeures(nb, idReservation);
                }
                if("modifier un service".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String serviceActuel = infos[4];
                    String service = (String)JOptionPane.showInputDialog(null, "service(s) actuel(s) : "+serviceActuel,"modifier Service",JOptionPane.QUESTION_MESSAGE);
                    rq.MAJchoix(idReservation, service);
                }
                if("ajouter un service".equals(changement)){
                    String services[] = rq.getServices();
                    String choix = (String)JOptionPane.showInputDialog(null, "quel service voulez vous ajouter?","ajouter service",JOptionPane.QUESTION_MESSAGE, null, services, services[0]);
                    rq.ajoutChoix(idReservation, choix);
                }
                if("modifier une option".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String serviceActuel = infos[4];
                    String service = (String)JOptionPane.showInputDialog(null, "option(s) actuel(s) : "+serviceActuel,"modifier une option",JOptionPane.QUESTION_MESSAGE);
                    rq.MAJchoix(idReservation, service);
                }
                if("ajouter une option".equals(changement)){
                    String options[] = rq.getOptions();
                    String choix = (String)JOptionPane.showInputDialog(null, "quel service voulez vous ajouter?","ajouter service",JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                    rq.ajoutChoix(idReservation, choix);   
                }
                String salles[] = {"studio", "cabane", "bureau", "atelier"};
                if("modifier une salle".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String salleActuelle = infos[4];
                    String salle = (String)JOptionPane.showInputDialog(null, "salle(s) actuelle(s) : "+salleActuelle,"modifier une salle",JOptionPane.QUESTION_MESSAGE, null, salles, salles[0]);
                    rq.MAJsalle(idReservation, salle);
                }
                if("ajouter une salle".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String disposition = infos[10];
                    String salle = (String)JOptionPane.showInputDialog(null, "quelle salle voulez vous ajouter?","ajouter salle",JOptionPane.QUESTION_MESSAGE, null, salles, salles[0]);
                    rq.ajoutSalle(idReservation, salle, disposition);   
                }
                if("client".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String clientActuel = infos[11];
                    String[] lesClients = rq.getClients();
                    String[] nom = rq.getnomsClients();
                    String[] prenom = rq.getprenomsClients();
                    String leClient = (String)JOptionPane.showInputDialog(null, "client actuel : "+clientActuel,"modifier une option",JOptionPane.QUESTION_MESSAGE, null, lesClients,lesClients[0]);
                    int lg = lesClients.length;
                    String[] leClient2 = new String[lg];
                    String nom2 = "";
                    String prenom2 = "";
                    for(int i = 0; i<longueur; i++){
                        leClient2[i] = prenom[i]+" "+nom[i];
                        if(client2[i] == null ? client == null : client2[i].equals(client)){
                            nom2 = noms[i];
                            prenom2 = prenoms[i];
                        }
                    }
                    rq.MAJclient(idReservation, prenom2, nom2);
                }
                if("disposition".equals(changement)){
                    String infos[] = rq.getInfosReservation(idReservation);
                    String lesDisposition[] ={"en_U", "ecole", "theatre", "ilots", "central", "salle_vide"}; 
                    String dispositionActuelle = infos[10];
                    String disposition = (String)JOptionPane.showInputDialog(null, "disposition actuelle : "+dispositionActuelle,"modifier une option",JOptionPane.QUESTION_MESSAGE, null, lesDisposition, lesDisposition[0]);
                    rq.MAJdisposition(idReservation, disposition);
                }
                if("formule".equals(changement)){
                    String formule[] = {"heure", "demi-journée", "journée"};
                    String infos[] = rq.getInfosReservation(idReservation);
                    String formuleActuelle = infos[6];
                    String disposition = (String)JOptionPane.showInputDialog(null, "formule actuelle : "+formuleActuelle,"modifier une formule",JOptionPane.QUESTION_MESSAGE, null, formule, formule[0]);
                    rq.MAJdisposition(idReservation, disposition);
                }
                
                
                
                String choix[] = {"petit dejeuner", "pause cafe", "pause cafe sucre", "pause cafe gourmand", "pause permanente", "plateaux repas", "afterwork", "champagne", "bloc note et stylos", "wifi", "tables", "chaises", "tableau", "microphone", "video-projecteur"};
            } 
            else{
                JOptionPane.showMessageDialog(null, "Il n'y a pas de reservation pour ce client", "information",JOptionPane.INFORMATION_MESSAGE);
            }
        } 
        catch (SQLException ex) {
            Logger.getLogger(ITboutonsRechercher.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        
        
        

        
        
    }//GEN-LAST:event_btnReservationActionPerformed

    private void btnClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClientActionPerformed
        
       
        
        
    
    }//GEN-LAST:event_btnClientActionPerformed

    private void btnDevisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevisActionPerformed
        
    }//GEN-LAST:event_btnDevisActionPerformed

    private void btnQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitterActionPerformed
        
        this.dispose();
        
    }//GEN-LAST:event_btnQuitterActionPerformed

    private void btnFactureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFactureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFactureActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ITboutonsModifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ITboutonsModifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ITboutonsModifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ITboutonsModifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ITboutonsModifier().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClient;
    private javax.swing.JButton btnDevis;
    private javax.swing.JButton btnFacture;
    private javax.swing.JButton btnQuitter;
    private javax.swing.JButton btnReservation;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
